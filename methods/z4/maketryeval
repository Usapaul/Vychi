MAIN = main.o
METHODS = coeffs.o runmethods.o slae.o
FUNCTIONS = integralmod.o polynomials.o
INITIAL = init.o

MAIN = main

COEFFS = coeffs
RUNMETHODS = runmethods
SLAE = slae

INTEGRALMOD = integralmod
POLYNOMIALS = polynomials

INIT = init
#------------------------------------------------
MAIN_D = $(INIT) $(COEFFS) $(RUNMETHODS) $(SLAE)
COEFFS_D = $(INIT) $(POLYNOMIALS) $(INTEGRALMOD)
RUNMETHODS_D = $(INIT) $(POLYNOMIALS)
SLAE_D = $(INIT)
INTEGRALMOD_D = $(INIT)
POLYNOMIALS_D = $(INIT)
#------------------------------------------------
OBJECTFILES = $(INIT) $(FUNCTIONS_A) $(METHODS_A) $(MAIN)

EXENAME = start
COMPOBJ = gfortran -c 
COMPEXE = gfortran -o $(EXENAME) -fcheck=all 

# LIB = -llapack

# run : $(EXENAME)
# 	./$(EXENAME)
	
# $(EXENAME) : $(OBJECTFILES)
# 	$(COMPEXE) $^


aim = $($(1)).o $($(1)).mod
#$(call aim,$(MAIN))

depend = $($(1)).f95 $(addsuffix .mod,$($(1)_D))
#$(call depend,$(MAIN))

whole_rule = $(call aim,$(1)) : $(call depend,$(1)); $(COMPOBJ) $$<

XXX = xxy : ; gfortran -c init.f95



$(call whole_rule,POLYNOMIALS)
$(call whole_rule,INIT)


try : 
	@echo $(call aim,MAIN)
	@echo $(call depend,MAIN)
	@echo $(call whole_rule,MAIN)

# $(MAIN).o : $(basename $@)


# $(MAIN).o : $(MAIN).f95 $(INIT).mod $(COEFFS).mod $(RUNMETHODS).mod $(SLAE).mod
# 	$(COMPOBJ) $<

# 						                  $(addsuffix .mod, )

# $(COEFFS).o $(COEFFS).mod : $(COEFFS).f95 $(INIT).mod $(POLYNOMIALS).mod $(INTEGRALMOD).mod
# 	$(COMPOBJ) $<

# $(RUNMETHODS).o $(RUNMETHODS).mod : $(RUNMETHODS).f95 $(INIT).mod $(POLYNOMIALS).mod
# 	$(COMPOBJ) $<

# $(SLAE).o $(SLAE).mod : $(SLAE).f95 $(INIT).mod
# 	$(COMPOBJ) $<

# $(INTEGRALMOD).o $(INTEGRALMOD).mod : $(INTEGRALMOD).f95 $(INIT).mod
# 	$(COMPOBJ) $<

# $(POLYNOMIALS).o $(POLYNOMIALS).mod : $(POLYNOMIALS).f95 $(INIT).mod
# 	$(COMPOBJ) $<

# $(INIT).o $(INIT).mod : $(INIT).f95
# 	$(COMPOBJ) $<


# $(MAIN) : %.o : %.


# .PHONY : clean

# clean : 
# 	rm -f *.mod
# 	rm -f *.o
