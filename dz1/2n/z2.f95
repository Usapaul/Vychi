program matrix
implicit none
integer(8) n, n1 !A и B - трехдиагональные матрицы n*n и n1*n1 соответственно (n=n1 по условию)
real, allocatable :: A(:,:), B(:,:), C(:,:)
integer big, i

! ***** Программа получает произведение матриц, AxB=C *****
! *****        Матрицы A и B трехдиагональные         *****

111 format(2x,i8)

open(100,file='data1.dat') !файл с матрицей A (#_n \ "матрица")

    read(100,111) n
    allocate(A(n,3),stat=big)
    if (big .ne. 0) stop 'big A'

    read(100,*) A(1,2:3); A(1,1)=0 ! Читаем матрицу A по строкам
    do i=2,n-1                     ! Массив (n,3) содержит соответственно строки матрицы по три элемента
	read(100,*) A(i,1:3)       ! (словно в матрице вырезали наклонную полосу вдоль диагонали, причем
    enddo                          ! эта полоса разделяется на три полоски). Но первый элемент в первой полоске
    read(100,*) A(n,1:2); A(n,3)=0 ! и последний - в третьей приравниваются к нулю (эти элементы вне матрицы)

close(100)

open(200,file='data2.dat')  !файл с матрицей B (#_n \ "матрица")

    read(200,111) n1; if (n .ne. n1) stop 'shape A /= shape B' !если вдруг случайно матрицы оказались не "NxN каждая"
    allocate(B(n,3),stat=big)
    if (big .ne. 0) stop 'big B'

    read(200,*) B(1,2:3); B(1,1)=0 ! Читаем матрицу B по строкам
    do i=2,n-1                     ! Массив (n,3) содержит соответственно строки матрицы по три элемента
	read(200,*) B(i,1:3)       ! (словно в матрице вырезали наклонную полосу вдоль диагонали, причем
    enddo                          ! эта полоса разделяется на три полоски). Но первый элемент в первой полоске
    read(200,*) B(n,1:2); B(n,3)=0 ! и последний - в третьей приравниваются к нулю (эти элементы вне матрицы)

close(200)


allocate(C(n,5),stat=big)
if (big .ne. 0) stop 'big C'
call composition(A,B,C,n)

open(777,file='result.dat',status='replace') !запись матрицы C в файл (#_n \ "матрица")


    write(777,'("# ",i8)') n 
    write(777,*) C(1,3:5)     ! Записываем матрицу С по строкам
    write(777,*) C(2,2:5)     ! Массив (n,5) содержит соответственно строки матрицы по пять элементов
    do i=3,n-2                ! (словно в матрице вырезали наклонную полосу вдоль диагонали, причем
	write(777,*) C(i,1:5) ! эта полоса разделяется на пять полосок).
    enddo                     ! Но первый со вторым элементы в первой полоске,
    write(777,*) C(n-1,1:4)   ! первый - во второй полоске, последний - в четвертой,
    write(777,*) C(n,1:3)     ! предпоследний с последним в пятой полоске равны нулю (эти элементы вне матрицы)

close(777)


end program matrix


subroutine composition(A,B,C,n) !процедура рассчитывает ненулевые элементы пятидиагональной матрицы
implicit none
integer i, j, k
integer(8) n
real, dimension(n,3) :: A, B
real, dimension(n,5) :: C

!рассчет элементов первой "полоски"
C(1,1)=0
C(2,1)=0
do i=3,n
    C(i,1)=A(i,1)*B(i-1,1)
enddo
!---------------------------------

!рассчет элементов второй "полоски"
C(1,2)=0
C(2,2)=A(2,1)*B(1,2)+A(2,2)*B(2,1)
do i=3,n
    C(i,2)=A(i,1)*B(i-1,2)+A(i,2)*B(i,1)
enddo
!---------------------------------

!рассчет элементов третьей "полоски"
C(1,3)=A(1,2)*B(1,2)+A(1,3)*B(2,1)
do i=2,n-1
    C(i,3)=A(i,1)*B(i-1,3)+A(i,2)*B(i,2)+A(i,3)*B(i+1,1)
enddo
C(n,3)=A(n,1)*B(n-1,3)+A(n,2)*B(n,2)
!---------------------------------

!рассчет элементов четвертой "полоски"
do i=1,n-2
    C(i,4)=A(i,2)*B(i,3)+A(i,3)*B(i+1,2)
enddo
C(n-1,4)=A(n-1,2)*B(n-1,3)+A(n-1,3)*B(n,2)
C(n,4)=0
!---------------------------------

!рассчет элементов пятой "полоски"
do i=1,n-2
    C(i,5)=A(i,3)*B(i+1,3)
enddo
C(n-1,5)=0
C(n,5)=0
!---------------------------------


end subroutine composition
